#!/usr/bin/env python3
#------------------------------------------------------------------------------
"""

Generate a loopless FFT function (in golang) for a given input length.

"""
#------------------------------------------------------------------------------

import sys

#------------------------------------------------------------------------------

_package = "core"
_fp = 64
_fft_n = 16

_fft_hn = _fft_n >> 1
_fft_hmask = _fft_hn - 1

_fft_nbits = _fft_n.bit_length() - 1
_complex_type = ("complex128", "complex64")[_fp == 32]

_buf_type = "fft%dBuf" % _fft_n
_w_var = "fft%dTwiddle" % _fft_n

#------------------------------------------------------------------------------

def reverse_bits(x, n):
  """reverse n bits of x"""
  rev = 0
  for i in range(n):
    rev = (rev << 1) + (x & 1)
    x >>= 1
  return rev

#------------------------------------------------------------------------------

def main():

  print("// generated by %s, do not edit" % sys.argv[0])

  # declare package
  print("package %s" % _package)

  # declare buffer type
  print("type %s [%d]%s" % (_buf_type, _fft_n, _complex_type))

  # twiddle factors declaration
  print("var %s [%d]%s" % (_w_var, _fft_hn, _complex_type))

  # twiddle factors initialisation
  print("func init() {")
  print("for i := range %s {" % _w_var)
  print("theta := -2.0 * math.Pi * float64(i) / %d.0" % _fft_n)
  print("s, c := math.Sincos(theta)")
  print("%s[i] = complex(c, s)" % _w_var)
  print("}")
  print("}\n")

  # declare function
  print("func fft%d(in, out *%s) {" % (_fft_n, _buf_type))

  print("w := &%s" % _w_var)
  print("var tmp %s" % _complex_type)

  # reverse the input buffer
  for i in range(_fft_n):
    print("out[%d] = in[%d]" % (reverse_bits(i, _fft_nbits), i))

  one_mask = 1
  hi_mask = -1
  lo_mask = 0
  shift = _fft_nbits - 1

  # butterfly stages
  for s in range(_fft_nbits):
    print("// stage %d" % s)
    for i in range(_fft_hn):
      j = (i&hi_mask)<<1 | (i & lo_mask)
      k = j | one_mask
      w = (i << shift) & _fft_hmask
      print("tmp = out[%d] * w[%d]" % (k, w))
      print("out[%d] = out[%d] - tmp" % (k, j))
      print("out[%d] += tmp" % j)
    shift -= 1
    one_mask <<= 1
    hi_mask <<= 1
    lo_mask = (lo_mask << 1) | 1

  print("}")

main()


#------------------------------------------------------------------------------
